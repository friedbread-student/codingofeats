class User:
    def __init__(self, username, password_hash, salt):
        self.username = username
        self.password_hash = password_hash
        self.salt = salt
    
    def verify_password(self, password):
        """Verify if the provided password matches the stored hash"""
        new_hash = hashlib.pbkdf2_hmac(
            'sha256',
            password.encode('utf-8'),
            self.salt.encode('utf-8'),
            100000
        ).hex()
        return new_hash == self.password_hash

class UserManager:
    def __init__(self, data_file='users.json'):
        self.data_file = data_file
        self.users = {}
        self.load_users()
    
    def load_users(self):
        """Load users from JSON file"""
        if os.path.exists(self.data_file):
            with open(self.data_file, 'r') as f:
                try:
                    data = json.load(f)
                    for username, user_data in data.items():
                        self.users[username] = User(
                            username=username,
                            password_hash=user_data['password_hash'],
                            salt=user_data['salt']
                        )
                except json.JSONDecodeError:
                    self.users = {}
    
    def save_users(self):
        """Save users to JSON file"""
        data = {}
        for username, user in self.users.items():
            data[username] = {
                'password_hash': user.password_hash,
                'salt': user.salt
            }
        
        with open(self.data_file, 'w') as f:
            json.dump(data, f, indent=4)
    
    def register(self, username, password):
        """Register a new user"""
        if username in self.users:
            return False, "Username already exists"
        
        if len(password) < 8:
            return False, "Password must be at least 8 characters"
        
        # Generate salt and hash the password
        salt = os.urandom(16).hex()
        password_hash = hashlib.pbkdf2_hmac(
            'sha256',
            password.encode('utf-8'),
            salt.encode('utf-8'),
            100000
        ).hex()
        
        # Create and store the new user
        self.users[username] = User(username, password_hash, salt)
        self.save_users()
        return True, "Registration successful"
    
    def login(self, username, password):
        """Authenticate a user"""
        if username not in self.users:
            return False, "Username not found"
        
        user = self.users[username]
        if user.verify_password(password):
            return True, "Login successful"
        else:
            return False, "Incorrect password"

class LoginSystem:
    def __init__(self):
        self.user_manager = UserManager()
    
    def display_menu(self):
        """Display the main menu"""
        print("\nWelcome to the Login System")
        print("1. Register")
        print("2. Login")
        print("3. Exit")
    
    def run(self):
        """Run the login system"""
        while True:
            self.display_menu()
            choice = input("Enter your choice (1-3): ")
            
            if choice == '1':
                self.register_user()
            elif choice == '2':
                self.login_user()
            elif choice == '3':
                print("Goodbye!")
                break
            else:
                print("Invalid choice. Please try again.")
    
    def register_user(self):
        """Handle user registration"""
        print("\n--- Registration ---")
        username = input("Enter username: ")
        password = input("Enter password: ")
        
        success, message = self.user_manager.register(username, password)
        print(message)
    
    def login_user(self):
        """Handle user login"""
        print("\n--- Login ---")
        username = input("Enter username: ")
        password = input("Enter password: ")
        
        success, message = self.user_manager.login(username, password)
        print(message)
        
        if success:
            self.logged_in_menu(username)
    
    def logged_in_menu(self, username):
        """Display menu after successful login"""
        while True:
            print(f"\nWelcome, {username}!")
            print("1. View profile")
            print("2. Logout")
            
            choice = input("Enter your choice (1-2): ")
            
            if choice == '1':
                print(f"\nUsername: {username}")
                print("This is your profile page.")
            elif choice == '2':
                print("Logging out...")
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == "__main__":
    system = LoginSystem()
    system.run()
